//
// Generated file, do not edit! Created by opp_msgtool 6.1 from EthernetFrame.msg.
//

#ifndef __ETHERNETFRAME_M_H
#define __ETHERNETFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class EthernetFrame;
class EthernetQFrame;
class EthTransmitReq;
/**
 * Class generated from <tt>EthernetFrame.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet EthernetFrame
 * {
 *     string dst;
 *     string src;
 *     int etherType;
 *     byteLength = 26;
 * }
 * </pre>
 */
class EthernetFrame : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string dst;
    omnetpp::opp_string src;
    int etherType = 0;

  private:
    void copy(const EthernetFrame& other);

  protected:
    bool operator==(const EthernetFrame&) = delete;

  public:
    EthernetFrame(const char *name=nullptr, short kind=0);
    EthernetFrame(const EthernetFrame& other);
    virtual ~EthernetFrame();
    EthernetFrame& operator=(const EthernetFrame& other);
    virtual EthernetFrame *dup() const override {return new EthernetFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDst() const;
    virtual void setDst(const char * dst);

    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);

    virtual int getEtherType() const;
    virtual void setEtherType(int etherType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EthernetFrame.msg:8</tt> by opp_msgtool.
 * <pre>
 * packet EthernetQFrame extends EthernetFrame
 * {
 *     int vlanid;
 *     int pcp;
 *     byteLength = 30;
 * }
 * </pre>
 */
class EthernetQFrame : public ::EthernetFrame
{
  protected:
    int vlanid = 0;
    int pcp = 0;

  private:
    void copy(const EthernetQFrame& other);

  protected:
    bool operator==(const EthernetQFrame&) = delete;

  public:
    EthernetQFrame(const char *name=nullptr, short kind=0);
    EthernetQFrame(const EthernetQFrame& other);
    virtual ~EthernetQFrame();
    EthernetQFrame& operator=(const EthernetQFrame& other);
    virtual EthernetQFrame *dup() const override {return new EthernetQFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getVlanid() const;
    virtual void setVlanid(int vlanid);

    virtual int getPcp() const;
    virtual void setPcp(int pcp);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetQFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetQFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EthernetFrame.msg:14</tt> by opp_msgtool.
 * <pre>
 * message EthTransmitReq
 * {
 *     string dst;
 *     string src;
 *     int vlanid;
 * }
 * </pre>
 */
class EthTransmitReq : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string dst;
    omnetpp::opp_string src;
    int vlanid = 0;

  private:
    void copy(const EthTransmitReq& other);

  protected:
    bool operator==(const EthTransmitReq&) = delete;

  public:
    EthTransmitReq(const char *name=nullptr, short kind=0);
    EthTransmitReq(const EthTransmitReq& other);
    virtual ~EthTransmitReq();
    EthTransmitReq& operator=(const EthTransmitReq& other);
    virtual EthTransmitReq *dup() const override {return new EthTransmitReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDst() const;
    virtual void setDst(const char * dst);

    virtual const char * getSrc() const;
    virtual void setSrc(const char * src);

    virtual int getVlanid() const;
    virtual void setVlanid(int vlanid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthTransmitReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthTransmitReq& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EthernetFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthernetFrame*>(ptr.get<cObject>()); }
template<> inline EthernetQFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthernetQFrame*>(ptr.get<cObject>()); }
template<> inline EthTransmitReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<EthTransmitReq*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __ETHERNETFRAME_M_H

